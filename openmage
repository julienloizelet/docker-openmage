#!/bin/sh
#
# A control-script for managing the docker-infrastructure components for OpenMage

# The first parameter is the action name
action=$1

# All other arguments are parameters
if [ "$#" -gt "1" ]; then
  shift
  parameters=$@
fi

# Paths
SCRIPTNAME=$(basename $0)
SCRIPTPATH=$(readlink -f "$0" 2>/dev/null)
if [ "$?" != 0 ]; then
  if [ ! -f "docker-compose.yml" ]; then
    echo >&2 " The $SCRIPTNAME-script will only work (on Linux) if you execute it from the project directory itself."
    exit 1
  fi
  SCRIPTPATH="$(pwd -P)/$SCRIPTNAME"
fi
PROJECTPATH=$(dirname "$SCRIPTPATH")

# Switch into the project directory
cd $PROJECTPATH

# Mandatory Tools
DOCKER=$(which docker)
if [ -z "$DOCKER" ]; then
  echo "'docker' was not found on your system." >&2
  exit 1
fi

DOCKERCOMPOSE=$(which docker-compose)
if [ -z "$DOCKERCOMPOSE" ]; then
  echo "'docker-compose' was not found on your system." >&2
  exit 1
fi

# Utils
XARGS=$(which xargs)
GREP=$(which grep)
SED=$(which sed)

#####################################
# Get environment variable value from a container
# Arguments:
#   1 : container type
#   2 : env variable name
# Returns:
#   value
#####################################
getEnvValue() {
  containerType=$1
  variableName=$2

  local containerName=$(getContainerNameByType "$containerType")
  if [ -z "$containerName" ]; then
    echo "Cannot determine the name of the container." >&2
    return 1
  fi

  local command="echo \${${variableName}}"

  local VALUE=$($DOCKER exec $containerName sh -c "${command}")

  echo $VALUE

}

#####################################
# Print URLs and Logon Information
# Arguments:
#   None
# Returns:
#   None
#####################################
printInformation() {

  local DOMAIN=$(getEnvValue "nginx" "DOMAIN")
  local MAILDEV_URL=$DOMAIN":8282"
  local PMA_URL=$DOMAIN":8081"
  local MYSQL_ROOT_PASSWORD=$(getEnvValue "mysql" "MYSQL_ROOT_PASSWORD")

  echo "Frontend: http://$DOMAIN"
  echo "Mail dev: http://$MAILDEV_URL"
  echo "Phpmyadmin: http://$PMA_URL"
  echo " - DB Username: root"
  echo " - DB Password: ${MYSQL_ROOT_PASSWORD}"

}

#########################################################################
# Get the full container name for the given container type (e.g. "php")
# Arguments:
#  CONTAINER_TYPE
# Returns:
#  The full name of the (first) container with the given type
#########################################################################
getContainerNameByType() {
  # abort if no type is specified
  local CONTAINER_TYPE="$1"
  if [ -z "$CONTAINER_TYPE" ]; then
    echo "No container type specified. Please specifiy a container type (e.g. php, mysql, nginx, ...)." >&2
    return 1
  fi

  # check if xargs is available
  if [ -z "$XARGS" ]; then
    echo "The tool 'xargs' was not found on your system." >&2
    return 1
  fi

  # check if grep is available
  if [ -z "$GREP" ]; then
    echo "The tool 'grep' was not found on your system." >&2
    return 1
  fi

  # check if sed is available
  if [ -z "$SED" ]; then
    echo "The tool 'sed' was not found on your system." >&2
    return 1
  fi

  local containerName=$($DOCKER ps -q | $XARGS $DOCKER inspect --format '{{.Name}}' | $GREP "$CONTAINER_TYPE" | $SED 's:/::' | $GREP "$CONTAINER_TYPE_1")
  echo $containerName
  return 0
}

executeMagerun() {
  local containerType="php"
  local containerName=$(getContainerNameByType "$containerType")
  if [ -z "$containerName" ]; then
    echo "Cannot determine the name of the container." >&2
    return 1
  fi

  $DOCKER exec -ti $containerName magerun --skip-root-check --root-dir="/var/www/html/web" $@
  return 0
}

executeInstall() {
  local containerType="php"
  local containerName=$(getContainerNameByType "$containerType")
  local timestamp=timestamp
  if [ -z "$containerName" ]; then
    echo "Cannot determine the name of the container." >&2
    return 1
  fi

  # abort if no type is specified
  local INSTALL_TYPE="$1"
  if [ -z "$INSTALL_TYPE" ]; then
    echo "No installation type specified. Please specify a installation type (quick or custom)." >&2
    return 1
  fi
  # abort if unavailable type
  if [ "$INSTALL_TYPE" != "quick" ] && [ "$INSTALL_TYPE" != "custom" ]; then
    echo "Type $INSTALL_TYPE is not allowed (quick, custom)." >&2
    return 1
  fi

  local DOMAIN=$(getEnvValue "nginx" "DOMAIN")
  local MYSQL_ROOT_PASSWORD=$(getEnvValue "mysql" "MYSQL_ROOT_PASSWORD")
  local DATABASE_NAME=$(getEnvValue "mysql" "DATABASE_NAME")
  local OPENMAGE_VERSION=$(getEnvValue "php" "OPENMAGE_VERSION")

  if [ "$INSTALL_TYPE" = "quick" ]; then
    echo "Quick install starts." >&2
    $DOCKER exec -ti $containerName magerun install --skip-root-check --root-dir="/var/www/html/web" --dbHost="mysql" --dbUser="root" --dbPass="${MYSQL_ROOT_PASSWORD}" --dbName="${DATABASE_NAME}" --installSampleData=yes --useDefaultConfigParams=yes --magentoVersionByName="${OPENMAGE_VERSION}" --installationFolder="/var/www/html/web/" --baseUrl="http://${DOMAIN}/"
    return 0
  fi

  if [ "$INSTALL_TYPE" = "custom" ]; then
    echo "Custom sources install starts." >&2
    $DOCKER exec -ti $containerName magerun install --skip-root-check --root-dir="/var/www/html/web" --dbHost="mysql" --dbUser="root" --dbPass="${MYSQL_ROOT_PASSWORD}" --dbName="${DATABASE_NAME}" --useDefaultConfigParams=yes --installationFolder="/var/www/html/web/" --baseUrl="http://${DOMAIN}/" --noDownload --forceUseDb
    echo "Admin url : http://${DOMAIN}/admin" >&2
    echo "Admin login : admin" >&2
    echo "Admin pasword : password1234567admin" >&2
    return 0
  fi

  return 0
}

executeComposer() {
  local containerType="php"
  local containerName=$(getContainerNameByType $containerType)
  if [ -z "$containerName" ]; then
    echo "Cannot determine the name of the container." >&2
    return 1
  fi

  # shellcheck disable=SC2068
  $DOCKER exec $containerName composer --working-dir="/var/www/html" $@
  return 0
}

enterContainer() {
  local containerType="$1"
  if [ -z "$containerType" ]; then
    echo "No container type specified. Please specifiy a container type (e.g. php, installer, mysql, nginx, ...)." >&2
    return 1
  fi

  local containerName=$(getContainerNameByType $containerType)
  if [ -z "$containerName" ]; then
    echo "Cannot determine the name of the container." >&2
    return 1
  fi

  $DOCKER exec -ti $containerName bash
  return 0
}

start() {
  $DOCKERCOMPOSE up -d && printInformation
}

stop() {
  $DOCKERCOMPOSE stop
}

restart() {
  $DOCKERCOMPOSE restart
  executeMagerun cache:clean
}

status() {
  $DOCKERCOMPOSE ps
}

stats() {
  # check if sed is available
  if [ -z "$SED" ]; then
    echo "Stats requires 'sed'. The tool was not found on your system." >&2
    return 1
  fi

  $DOCKER ps -q | $XARGS $DOCKER inspect --format '{{.Name}}' | $SED 's:/::' | $XARGS $DOCKER stats
}

magerun() {
  executeMagerun $parameters
}

composer() {
  executeComposer $parameters
}

enter() {
  enterContainer $parameters
}

destroy() {
  $DOCKERCOMPOSE stop
  $DOCKERCOMPOSE rm --force
}

install() {
  executeInstall $parameters
}

logs() {
  $DOCKERCOMPOSE logs -f
}

case "$action" in
start)
  start
  ;;

stop)
  stop
  ;;

restart)
  restart
  ;;

status)
  status
  ;;

stats)
  stats
  ;;

magerun)
  magerun
  ;;

composer)
  composer
  ;;

enter)
  enter
  ;;

destroy)
  destroy
  ;;

install)
  install
  ;;

logs)
  logs
  ;;

*)
  echo "usage : $0 start|stop|restart|status|stats|magerun|composer|enter|destroy|install|logs

  start      Starts the docker containers (and triggers the
             installation if magento is not yet installed)
  stop       Stops all docker containers
  restart    Restarts all docker containers
  status     Prints the status of all docker containers
  stats      Displays live resource usage statistics of all containers
  magerun    Executes magerun in the magento root directory
  composer   Executes composer in the magento root directory
  enter      Enters the bash of a given container type (e.g. php, mysql)
  destroy    Stops all containers and removes all data
  install    --type Install OpenMage (type can be quick or custom)
  logs       Show all container logs
"
  ;;
esac

exit 0
